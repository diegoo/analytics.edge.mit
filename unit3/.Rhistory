quality = read.csv("quality.csv")
str(quality)
table(quality$PoorCare)
install.packages("caTools")
library(caTools)
quality = read.csv("quality.csv")
str(quality)
table(quality$PoorCare)
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
split
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog = glm(PoorCare ~ OfficeVisits + Narcotics, data=qualityTrain, family=binomial)
summary(QualityLog)
predictTrain = predict(QualityLog, type="response")
summary(predictTrain)
tapply(predictTrain, qualityTrain$PoorCare, mean)
quality = read.csv("quality.csv")
install.packages("caTools")
library(caTools)
quality = read.csv("quality.csv")
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog = glm(PoorCare ~ StartedOnCombination + ProviderCount, data = qualityTrain, family = binomial)
library(caTools)
quality = read.csv("quality.csv")
set.seed(88)
split = sample.split(quality$PoorCare, SplitRatio = 0.75)
qualityTrain = subset(quality, split == TRUE)
qualityTest = subset(quality, split == FALSE)
QualityLog <- glm(PoorCare ~ StartedOnCombination + ProviderCount, data = qualityTrain, family = binomial)
summary(QualityLog)
str(quality)
table(quality$StartedOnCombination, quality$PoorCare, 2)
table(quality$StartedOnCombination, quality$PoorCare, 0)
table(quality$StartedOnCombination, quality$PoorCare, 1)
table(quality$StartedOnCombination)
head(quality)
quality[,c(12,14)
]
subset(quality, StartedOnCombination == TRUE)
8 / 1.5
songs <- read.csv("songs.csv")
SongsTrain <- subset(songs, year <= 2009)
SongsTest <- subset(songs, year == 2010)
nonvars = c("year", "songtitle", "artistname", "songID", "artistID")
SongsTrain = SongsTrain[ , !(names(SongsTrain) %in% nonvars) ]
SongsTest = SongsTest[ , !(names(SongsTest) %in% nonvars) ]
SongsLog1 = glm(Top10 ~ ., data=SongsTrain, family=binomial)
summary(SongsLog1)
cor(songs$loudness, songs$energy)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
SongsLog2 = glm(Top10 ~ . - loudness, data=SongsTrain, family=binomial)
summary(SongsLog2)
SongsLog3 = glm(Top10 ~ . - energy, data=SongsTrain, family=binomial)
summary(SongsLog3)
predictions.SongTest <- predict(SongsLog3, type="response", newdata=SongsTest)
predictions.SongTest
predictions.SongTest <- predict(SongsLog3, type="response", newdata=SongsTest)
table(SongsTest$Top10, testprediction >= 0.45)
table(SongsTest$Top10, predictions.SongTest >= 0.45)
dim(SongsTest$Top10)
table(SongsTest$Top10)
(309 + 19) / 373
predictions.SongTest.accuracy <- (309 + 19) / 373
predictions.SongTest.accuracy
class(predictions.SongTest)
type(predictions.SongTest)
help(predictions.SongTest)
predictions.SongTest?
=
predictions.SongTest??
table(SongsTest$Top10)
table(SongsTrain$Top10)
314 + 59
314 / 373
table(predictions.SongTest)
head(predictions.SongTest9
)
head(predictions.SongTest)
table(predictions.SongTest >= 0.45)
19 (19 + 40)
19 / (19 + 40)
309 / (309 + 5)
table(SongTest$Top10)
table(SongsTest$Top10)
table(predictions.SongTest >= 0.45)
24 / 349
59 / 314
parole <- read.csv("parole.csv")
str(parole)
table(parole$violator)
parole$state <- as.factor(parole$state)
parole$crime <- as.factor(parole$crime)
str(parole)
xparole <- read.csv("parole.csv")
str(xparole)
summary(xparole$crime)
summary(parole$crime)
summary(parole$crime)
table(parole$crime)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
install.packages("caTools")
parole
install.packages("caTools")
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
nrow(train)
nrow(test)
202 / (202+473)
473 / (202+473)
set.seed(144)
library(caTools)
split = sample.split(parole$violator, SplitRatio = 0.7)
train = subset(parole, split == TRUE)
test = subset(parole, split == FALSE)
str(parole)
model.4.1 <- glm(violator ~ ., data=train, family=binomial)
summary(model.4.1)
e^1.61
exp(1.61)
exp(1.6119919)
str(parole)
str(parole)
summary(race)
summary(parole$race)
summary(parole$state)
summary(model.4.1)
odds.4.3 <- exp(-4.2411574 + 0.8867192 + 0.3869904 + 50*(-0.0001756) + 3*(-0.123886) + 12*0.0802954 + 0.6837143)
help(log)
log(odds.4.3)
intercept           = -4.2411574
c.male              = 0.3869904
c.race              = 0.8867192
c.age               = -0.0001756
c.time.served       = -0.1238867
c.max.sentence      = 0.0802954
c.multiple.offenses = 1.6119919
c.crime2            = 0.6837143
odds.4.3 <- exp(intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2)
log(odds.4.3)
odds.4.3
parolee <- data.frame(c(male=1,race=1,age=50,state=Maryland,sentence=3months,maximum.sentence=12months,multiple.offenses=false,larceny))
names(parolee) <- c("male","race","age","time.served","max.sentence","crime2")
parolee <- data.frame(c(1,1,50,3,12,1))
parolee <- data.frame(c(1,1,50,3,12,1))
names(parolee) <- c("male","race","age","time.served","max.sentence","crime2")
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1)))
names(parolee) <- c("male","race","age","time.served","max.sentence","crime2")
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1)))
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1))
names(parolee) <- c("male","race","age","time.served","max.sentence","crime2")
parolee
str(parolee)
str(parole)
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1))
names(parolee) <- c("male","race","age","time.served","max.sentence","crime2")
answer.4.3 <- predict(model.4.1, newdata=parolee, type="response")
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1),c(1),c(2))
names(parolee) <- c("male","race","age","time.served","max.sentence","state","crime")
parolee$state <- as.factor(parolee$state)
parolee$crime <- as.factor(parolee$crime)
answer.4.3 <- predict(model.4.1, newdata=parolee, type="response")
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1),c(1),c(2),c(0))
names(parolee) <- c("male","race","age","time.served","max.sentence","state","crime","multiple.offenses")
parolee$state <- as.factor(parolee$state)
parolee$crime <- as.factor(parolee$crime)
answer.4.3 <- predict(model.4.1, newdata=parolee, type="response")
parolee
head(parolee)
str(parolee)
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1),c(2),c(0))
names(parolee) <- c("male","race","age","time.served","max.sentence","state","crime","multiple.offenses")
parolee$state = factor(parolee$state, levels = 1:4)
parolee$crime = factor(parolee$crime, levels = 1:4)
parolee
str(parolee)
parolee <- data.frame(c(1),c(1),c(50),c(3),c(12),c(1),c(2),c(0))
names(parolee) <- c("male","race","age","time.served","max.sentence","state","crime","multiple.offenses")
parolee$state = factor(parolee$state, levels = 1:4)
parolee$crime = factor(parolee$crime, levels = 1:4)
answer.4.3 <- predict(model.4.1, newdata=parolee, type="response")
answer.4.3
str(parolee)
str(parole)
intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2
1 / (1 + exp(-1 * (intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2)))
answer.4.3
odds.4.3 <- exp(intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2)
odds.4.3
0.1543832 / 0.1825687
answer.4.3
0.845617 + 0.154383
predict(model.4.1, newdata=parolee)
predict(model.4.1, newdata=parolee, type="response")
intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2
odds.4.3 <- exp(intercept + 1*c.male + 1*c.race + 50*c.age + 3*c.time.served + 12*c.max.sentence + 1*c.crime2)
## [1] 0.1825687
## log(odds) de que sea violator:

## -1.700629
log.odds.4.3 == log(odds.4.3)
1 / (1 + exp(-1 * log.odds.4.3))
test
predict(model.4.1, newdata=test, type="response")
which.max(predict(model.4.1, newdata=test, type="response"))
predictions.parole.test <- predict(model.4.1, newdata=test, type="response")
dim(predictions.parole.test)
nrow(predictions.parole.test)
length(predictions.parole.test)
dim(train)
dim(test)
head(train)
head(test)
head(predictions.parole.test)
predictions.parole.test[1]
predictions.parole.test[2]
predictions.parole.test[73]
table(test, predictions >= 0.5)
predictions = predict(mod, newdata=test, type="response")
summary(predictions)
predictions.parole.test <- predict(model.4.1 newdata=test, type="response")
summary(predictions.parole.test)
table(test, predictions.parole.test >= 0.5)
head(predictions.parole.test)
table(test$violator, predictions.parole.test >= 0.5)
table(test$violator, predictions.parole.test >= 0.5)
accuracy <- (167 + 12) / (167 + 12 + 12 + 11)
accuracy
table(test$violator)
sensitivity <- 12 / (11 + 12)
specificity <- 167 / (167 + 12)
accuracy <- (167 + 12) / (167 + 12 + 12 + 11)
sensitivity
specificity
accuracy
table(test$violator)
nrow(test)
23 / 202
179 / 202
roc.test <- prediction(predictions.parole.test, test$violator)
library(ROCR)
roc.test <- prediction(predictions.parole.test, test$violator)
install.packages("ROCR")
library(ROCR)
roc.test <- prediction(predictions.parole.test, test$violator)
as.numeric(performance(roc.test, "auc")@y.values)
