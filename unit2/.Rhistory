wine = read.csv("wine.csv")
str(wine)
summary(wine)
# Linear Regression (one variable)
model1 = lm(Price ~ AGST, data=wine)
summary(model1)
# Sum of Squared Errors
model1$residuals
SSE = sum(model1$residuals^2)
SSE
model2 = lm(Price ~ AGST + HarvestRain, data=wine)
summary(model2)
# Sum of Squared Errors
SSE = sum(model2$residuals^2)
SSE
model3 = lm(Price ~ AGST + HarvestRain + WinterRain + Age + FrancePop, data=wine)
summary(model3)
# Sum of Squared Errors
SSE = sum(model3$residuals^2)
SSE
model.HR.WR = lm(Price ~ HarvestRain + WinterRain, data = wine)
summary(model.HR.WR)
SSE.HR.WR <- sum(model.HR.WR$residuals^2)
SSE.HR.WR
model.HR.WR = lm(Price ~ WinterRain + HarvestRain, data = wine)
summary(model.HR.WR)
options(scipen=10)
model.HR.WR = lm(Price ~ HarvestRain + WinterRain, data = wine)
summary(model.HR.WR)
model.HR.WR = lm(Price ~ HarvestRain + WinterRain, data = wine)
summary(model.HR.WR)
cor(wine$WinterRain, wine$Price)
cor(wine$Age, wine$FrancePop)
cor(wine)
cor(wine$WinterRain, wine$HarvestRain)
wineTest = read.csv("wine_test.csv")
str(wineTest)
# Make test set predictions
predictTest = predict(model4, newdata=wineTest)
predictTest
# Compute R-squared
SSE = sum((wineTest$Price - predictTest)^2)
SST = sum((wineTest$Price - mean(wine$Price))^2)
1 - SSE/SST
SSE = sum((wineTest$Price - predictTest)^2)
SST = sum((wineTest$Price - mean(wine$Price))^2)
1 - SSE/SST
wineTest = read.csv("wine_test.csv")
str(wineTest)
# Make test set predictions
predictTest = predict(model4, newdata=wineTest)
predictTest
# Compute R-squared
SSE = sum((wineTest$Price - predictTest)^2)
SST = sum((wineTest$Price - mean(wine$Price))^2)
1 - SSE/SST
model4 = lm(Price ~ AGST + HarvestRain + WinterRain + Age, data=wine)
summary(model4)
wineTest = read.csv("wine_test.csv")
str(wineTest)
# Make test set predictions
predictTest = predict(model4, newdata=wineTest)
predictTest
# Compute R-squared
SSE = sum((wineTest$Price - predictTest)^2)
SST = sum((wineTest$Price - mean(wine$Price))^2)
1 - SSE/SST
baseball = read.csv("baseball.csv")
str(baseball)
# Subset to only include moneyball years
moneyball = subset(baseball, Year < 2002)
str(moneyball)
# Compute Run Difference
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
# Scatterplot to check for linear relationship
plot(moneyball$RD, moneyball$W)
# Regression model to predict wins
WinsReg = lm(W ~ RD, data=moneyball)
summary(WinsReg)
# VIDEO 3
str(moneyball)
# Regression model to predict runs scored
RunsReg = lm(RS ~ OBP + SLG + BA, data=moneyball)
summary(RunsReg)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
summary(RunsReg)
# VIDEO 2
# Read in data
baseball = read.csv("baseball.csv")
str(baseball)
# Subset to only include moneyball years
moneyball = subset(baseball, Year < 2002)
str(moneyball)
# Compute Run Difference
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
# Scatterplot to check for linear relationship
plot(moneyball$RD, moneyball$W)
# Regression model to predict wins
WinsReg = lm(W ~ RD, data=moneyball)
summary(WinsReg)
# VIDEO 3
str(moneyball)
# Regression model to predict runs scored
RunsReg = lm(RS ~ OBP + SLG + BA, data=moneyball)
summary(RunsReg)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
summary(RunsReg)
str(moneyball)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
summary(RunsReg)
baseball = read.csv("baseball.csv")
str(baseball)
# Subset to only include moneyball years
moneyball = subset(baseball, Year < 2002)
str(moneyball)
# Compute Run Difference
moneyball$RD = moneyball$RS - moneyball$RA
str(moneyball)
WinsReg = lm(W ~ RD, data=moneyball)
summary(WinsReg)
RunsReg = lm(RS ~ OBP + SLG + BA, data=moneyball)
summary(RunsReg)
RunsReg = lm(RS ~ OBP + SLG, data=moneyball)
summary(RunsReg)
-804.63 + (2737.77 * 0.311) + (1584.91 * 0.405) 
select.player <- function(obg, slg) { return -804.63 + (2737.77 * obg) + (1584.91 * slg) }
select.player(0.338,0.540)
select.player(0.391,0.450)
select.player(0.369,0.374)
select.player(0.313,0.447)
select.player <- function(obg, slg) { return (-804.63 + (2737.77 * obg) + (1584.91 * slg)) }
select.player(0.338,0.540)
select.player(0.391,0.450)
select.player(0.369,0.374)
select.player(0.313,0.447)
select.player(0.361,0.500)
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94,88,95,88,93,94,98,93,94)
cor(teamRank, wins2012)
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94,88,95,88,93,94,98,97,93,94)
cor(teamRank, wins2012)
teamRank = c(1,2,3,3,4,4,4,4,5,5)
wins2012 = c(94,88,95,88,93,94,98,97,93,94)
cor(teamRank, wins2012)
wins2013 = c(97,97,92,93,92,96,94,96,92,90)
cor(teamRank, wins2013)
climate.change <- read("climate_change.csv")
climate.change <- read.csv("climate_change.csv")
str(climate.change)
training <- subset(climate.change, Year <= 2006)
testing <- subset(climate.change, Year > 2006)
training
dim(training)
dim(testing)
model.1.1 <- lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data = training)
model.1.1
options(scipen=10)
climate.change <- read.csv("climate_change.csv")
training <- subset(climate.change, Year <= 2006)
testing <- subset(climate.change, Year > 2006)
model.1.1 <- lm(Temp ~ MEI + CO2 + CH4 + N2O + CFC.11 + CFC.12 + TSI + Aerosols, data = training)
model.1.1
summary(model.1.1)
cor(training)
summary(model.1.1)
cor(training)
cor(training$N2O, training$MEI)
cor(training$N2O, training$CO2)
cor(training$N2O, training$CH4)
cor(training$N2O, training$CFC.11)
cor(training$N2O, training$CFC.12)
cor(training$N2O, training$Aerosols)
cor(training$N2O, training$TSI)
cor(training$N2O, training$MEI)
cor(training$N2O, training$CO2)
cor(training$N2O, training$CH4)
cor(training$N2O, training$CFC.11)
cor(training$N2O, training$CFC.12)
cor(training$N2O, training$Aerosols)
cor(training$N2O, training$TSI)
cor(training$CFC.11, training$MEI)
cor(training$CFC.11, training$CO2)
cor(training$CFC.11, training$CH4)
cor(training$CFC.11, training$N2O)
cor(training$CFC.11, training$CFC.12)
cor(training$CFC.11, training$Aerosols)
cor(training$CFC.11, training$TSI)
model.3 <- lm(Temp ~ MEI + TSI + Aerosols + N2O, data = training)
model.3
model.3 <- lm(Temp ~ MEI + TSI + Aerosols + N2O, data = training)
summary(model.3)

summary(model.3)
model.4 <- step(model.3)
summary(model.4)
summary(model.1.1)
model.4 <- step(model.1.1)
summary(model.4)
predictTest.5 <- predict(model.4, newdata = testing)
SSE = sum((testing$Temp - predictTest.5)^2)
SST = sum((testing$Temp - mean(training$Temp))^2)
1 - SSE/SST
pisaTrain <- read.csv("pisa2009train.csv")
pisaTest <- read.csv("pisa2009test.csv")
dim(pisaTrain)
dim(pisaTest)
head(pisaTrain)
table(pisaTrain$male)
tapply(pisaTrain, male, mean)
tapply(pisaTrain$readingScore, pisaTrain$male, mean)
colnames(pisaTrain)[colSums(is.na(pisaTrain)) > 0]
colnames(pisaTrain)[colSums(is.na(pisaTrain)) == 0]
which(is.na(pisaTrain$readingScore))
which(is.na(pisaTrain$preschool))
colnames(pisaTrain)[colSums(is.na(pisaTrain)) > 0]
colnames(pisaTrain)[colSums(is.na(pisaTrain)) == 0]
pisaTrain = na.omit(pisaTrain)
pisaTest = na.omit(pisaTest)
dim(pisaTrain)
dim(pisaTest)
str(pisaTrain)
levels(pisaTrain$raceeth)
levels(pisaTrain$grade)
summary(pisaTrain$grade)
pisaTrain$grade.f <- as.factor(pisaTrain$grade)
summary(pisaTrain$grade)
summary(pisaTrain$grade.f)
levels(pisaTrain$grade.f)
pisaTrain$raceeth = relevel(pisaTrain$raceeth, "White")
pisaTest$raceeth = relevel(pisaTest$raceeth, "White")
pisaTrain$grade.f <- NULL
dim(pisaTrain)
dim(pisaTesst)
dim(pisaTest)
LinReg = lm(readingScore ~ ., data = pisaTrain)
summary(LinReg)
LinReg = lm(readingScore ~ ., data = pisaTrain)
lmScore <- lm(readingScore ~ ., data = pisaTrain)
summary(lmScore)
 sqrt(73.81)
predictions.training <- predict(lmScore, newdata = pisaTrain)
RMSE.training <- sqrt((predictions.training - pisaTrain$readingScore)^2) / (nrow(pisaTrain))
RMSE.training
predictions.training <- predict(lmScore, newdata = pisaTrain)
SSE.training <- (predictions.training - pisaTrain$readingScore)^2
RMSE.training <- sqrt(SSE.training / (nrow(pisaTrain))
predictions.training <- predict(lmScore, newdata = pisaTrain)
SSE.training <- (predictions.training - pisaTrain$readingScore)^2
RMSE.training <- sqrt(SSE.training / nrow(pisaTrain))
SSE.training
predictions.training
RMSE.training <- mean(sqrt(SSE.training / nrow(pisaTrain)))
RMSE.training
SSE.training <- sum((predictions.training - pisaTrain$readingScore)^2)
RMSE.training <- mean(sqrt(SSE.training / nrow(pisaTrain)))
SSE.training <- sum((predictions.training - pisaTrain$readingScore)^2)
RMSE.training <- sqrt(SSE.training / nrow(pisaTrain))
RMSE.training
summary(lmScore)
RMSE.training
summary(lmScore)
grade.f <- as.factor(pisaTrain$grade)
levels(grade.f)
29.54*2
summary(lmScore)
predTest <- predict(lmScore, newdata = pisaTest)
predTest
summary(predTest)
max(predTest) - min(predTest)
SSE.testing <- sum((predictions.testing - pisaTest$readingScore)^2)
RMSE.testing <- sqrt(SSE.testing / nrow(pisaTest))
SSE.testing <- sum((predTest - pisaTest$readingScore)^2)
RMSE.testing <- sqrt(SSE.testing / nrow(pisaTest))
SSE.testing
RMSE.testing
SSE.training
RMSE.testing
SST.training <- sum((predictions.training - mean(pisaTrain$readingScore))^2)
SST.training
dim(predictions.training)
predictions.training <- predict(lmScore, newdata = pisaTrain)
SST.training <- sum((predictions.training - mean(pisaTrain$readingScore))^2)
SST.training
length(predictions.training)
mean(predictions.training)
SST.training <- sum((predictions.training - 517.9629)^2)
SST.training
SST.testing <- sum((predTest - 517.9629)^2)
SST.testing
SST.testing <- sum((predTest - mean(pisaTest$readingScore)^2)
SST.testing <- sum((predTest - mean(pisaTest$readingScore))^2)
SST.testing
)summary(predTest
summary(predTest)
predTest
length(predTest)
mean(predTest)
SST.testing <- sum((predTest - 516.7103)^2)
SST.testing
SST.testing <- sum((predTest - mean(pisaTrain$readingScore))^2)
SST.testing
sum((baseline - pisaTest$readingScore)^2)
sum((516.7103 - pisaTest$readingScore)^2)
SST.testing <- sum((baseline - pisaTest$readingScore)^2).
SST.testing <- sum((516.7103 - pisaTest$readingScore)^2).
SST.testing <- sum((516.7103 - pisaTest$readingScore)^2)
SSE.testing <- sum((predTest - pisaTest$readingScore)^2)
SSE.testing
SST.testing
1 - (SSE.testing / SST.testing)
FluTrain <- read.csv("FluTrain.csv")
FluTest <- read.csv("FluTest.csv")
str(FluTrain)
summary(FluTrain)
head(FluTrain)
which.max(FluTrain$ILI)
FluTrain[303,]
FluTrain$Week
FluTrain[303,]
which.max(FluTrain$ILI)
FluTrain[303,]
which.max(FluTrain$Queries)
plot(ln(FluTrain$ILI), FluTrain$Queries)
plot(log(FluTrain$ILI), FluTrain$Queries)
hist(FluTrain$ILI)
help(plot)
plot(log(FluTrain$ILI), FluTrain$Queries)
FluTrend1 <- lm(log(ILI) ~ Queries, data = FluTrain)
summary(FluTrend1)
cor(FluTrain$ILI, FluTrain$Queries)
cor(FluTrain$ILI, FluTrain$Queries)^2
log(1/cor(FluTrain$ILI, FluTrain$Queries))
exp(-0.5 * cor(FluTrain$ILI, FluTrain$Queries))
cor(log(FluTrain$ILI), FluTrain$Queries)
cor(log(FluTrain$ILI), FluTrain$Queries)^2
log(1/cor(log(FluTrain$ILI), FluTrain$Queries))
exp(-0.5 * cor(log(FluTrain$ILI), FluTrain$Queries))
cor(log(FluTrain$ILI), FluTrain$Queries)
cor(log(FluTrain$ILI), FluTrain$Queries)^2
log(1/cor(log(FluTrain$ILI), FluTrain$Queries))
exp(-0.5 * cor(log(FluTrain$ILI), FluTrain$Queries))
FluTrend1$model
FluTrend1$residuals
x <- summary(FluTrend1)
x$r.squared
summary(FluTrend1)$r.squared
PredTest1 = exp(predict(FluTrend1, newdata=FluTest))
which?
help(which)
which(FluTest$Week == "2012-03-12")
FluTest$Week
which(FluTest$Week == "2012-03-11")
FluTest[11,]
dim(FluTest)
length(PredTest1)
PredTest1[11,]
PredTest1[11]
(FluTest$ILI[11] - PredTest1[11]) / FluTest$ILI[11]
(FluTest$ILI[11] - PredTest1[11]) / FluTest$ILI[11]
SSE.testing <- sum((PredTest1 - FluTest$ILI)^2)
RMSE.testing <- sqrt(SSE.testing / nrow(FluTest))
SSE.testing
RMSE.t
RMSE.testing
install.packages("zoo")
library(zoo)
FluTrain$ILILag2 = coredata(ILILag2)
ILILag2 = lag(zoo(FluTrain$ILI), -2, na.pad=TRUE)
FluTrain$ILILag2 = coredata(ILILag2)
sum(is.na(ILILag2))
ILILag2
summary(FluTrain$ILILag2)
plot(log(ILILag2),log(FluTrain$ILI)
)
FluTrend2 <- lm(log(ILI) ~ Queries + log(ILILag2), data = FluTrain)
summary(FluTrend2)
summary(FluTrend1)
FluTest$ILILag2 = coredata(lag(zoo(FluTest$ILI), -2, na.pad=TRUE))
summary(FluTest$ILILag2)
FluTest$ILILag2[1]
FluTest$ILILag2[2]
FluTest$ILILag2[3]
length(FluTrain$ILI)
FluTrain$ILI[418]
FluTrain$ILI[419]
FluTrain$ILI[417]
FluTrain$ILI[416]
FluTrain$ILI[416]
FluTrain$ILI[417]
FluTrain$ILI[1]
FluTrain$ILI[2]
PredTest2 = exp(predict(FluTrend2, newdata = FluTest))
SSE.testing <- sum((PredTest2 - FluTest$ILI)^2)
RMSE.testing <- sqrt(SSE.testing / nrow(FluTest))
RMSE.testing
FluTest$ILILag2[1] <- FluTrain$ILI[416]
FluTest$ILILag2[2] <- FluTrain$ILI[417]
PredTest2 = exp(predict(FluTrend2, newdata = FluTest))
SSE.testing <- sum((PredTest2 - FluTest$ILI)^2)
RMSE.testing <- sqrt(SSE.testing / nrow(FluTest))
RMSE.testing
